rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'administrator';
    }

    // Helper function to check for ranger role
    function isRanger() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ranger';
    }

    // Users can read their own document, and admins can manage all users.
    // Unauthenticated users can query for a user by username to facilitate login.
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow write: if isAdmin();
      allow list: if request.query.where.path == "username"; // Allow unauthenticated query by username
    }

    // Rangers and Admins can read all incidents. Only Admins can create/delete.
    match /incidents/{incidentId} {
      allow read: if isRanger() || isAdmin();
      allow create, delete: if isAdmin();
      // Rangers can update status and notes, Admins can update anything.
      allow update: if (isRanger() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'notes', 'photos'])) || isAdmin();

      // Rangers and Admins can manage notes on incidents they can access.
      match /notes/{noteId} {
        allow read, write: if isRanger() || isAdmin();
      }
    }

    // Only Admins can manage devices. Rangers can only read them.
    match /devices/{deviceId} {
      allow read: if isRanger() || isAdmin();
      allow write: if isAdmin();
    }
  }
}